package mdg_schema.game.resource;

// Instead of in system, put in here so consolidated.
enum ResourceRequestType{
    OCCUPY = 1;
    COLLECT = 2;
    RELEASE = 3;
}

type CollectRequest{
    EntityId collector_id = 1;
    EntityId resource_id = 2;
}

// Maybe t could be event instead of being done via resource?
// Nah, depleter_id will be invalid if not depleted, this way
// can check if depleted, then remove component.
type CollectResponse{
    int32 times_until_depleted = 1;
    option<EntityId> depleter_id = 2;
    EntityId resource_id = 3;
}

type OccupyRequest{
    EntityId occupying = 1;
    EntityId to_occupy = 2;
}

type OccupyResponse{
    // Maybe response with list of all occupants on resource.
    bool occupied = 1;
    EntityId resource_id = 3;
    bool fully_occupied = 4;
}

type ReleaseRequest{
    EntityId occupant = 1;
    EntityId resource_id = 2;
}
type ReleaseResponse{

}



component Resource{
    id = 503;
    list<EntityId> occupants = 1;
    int32 health = 2;
    command CollectResponse collect(CollectRequest);
    command ReleaseResponse release(ReleaseRequest);
    command OccupyResponse occupy(OccupyRequest);
}