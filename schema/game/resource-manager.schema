
package mdg_schema.game.resource;

// Instead of in system, put in here so consolidated.
enum ResourceRequestType{
    OCCUPY = 1;
    COLLECT = 2;
    RELEASE = 3;
}

type CollectRequest{
    EntityId collector_id = 1;
    EntityId resource_id = 2;
}

// Maybe t could be event instead of being done via resource?
// Nah, depleter_id will be invalid if not depleted, this way
// can check if depleted, then remove component.
type CollectResponse{
    int32 times_until_depleted = 1;
    EntityId depleter_id = 2;
    // Need this for adding to inventory.
    // Need to flesh that out but this def needed in payload.
    EntityId resource_id = 3;
}

type OccupyRequest{
    EntityId occupying = 1;
    EntityId to_occupy = 2;
}

type OccupyResponse{
    // Maybe response with list of all occupants on resource.
    list<EntityId> occupants = 1;
    EntityId resource_id = 2;
    bool fully_occupied = 3;
}

type ReleaseRequest{

}
type ReleaseResponse{

}

// Should be done in resoruce manage not resource itself.
component ResourceManager{
    id = 501;
    // Perhaps this will also handle respawning of resources.
    command CollectResponse collect(CollectRequest);
    command ReleaseResponse release(ReleaseResponse);
    command OccupyResponse occupy(OccupyRequest);
}